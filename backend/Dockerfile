# Build stage
FROM golang:1.23-alpine AS builder

# Set working directory
WORKDIR /app

# Install git and ca-certificates (needed for go mod download)
RUN apk add --no-cache git ca-certificates

# Copy go mod files
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download

# Copy source code
COPY . .

# Build the application
RUN CGO_ENABLED=0 GOOS=linux go build -a -installsuffix cgo -o meli-backend ./cmd/server

# Final stage
FROM alpine:latest

# Install ca-certificates for HTTPS requests, dbmate, and netcat
RUN apk --no-cache add ca-certificates curl netcat-openbsd && \
    curl -fsSL -o /usr/local/bin/dbmate https://github.com/amacneil/dbmate/releases/latest/download/dbmate-linux-amd64 && \
    chmod +x /usr/local/bin/dbmate

# Create non-root user
RUN addgroup -g 1001 -S appgroup && \
    adduser -u 1001 -S appuser -G appgroup

# Set working directory
WORKDIR /app

# Copy binary from builder stage
COPY --from=builder /app/meli-backend .

# Copy migrations directory and scripts
COPY scripts/ ./scripts/
COPY internal/db/ ./db/

# Change ownership to non-root user
RUN chown -R appuser:appgroup /app

# Make start script executable
RUN chmod +x ./scripts/start.sh

# Switch to non-root user
USER appuser

# Expose port
EXPOSE 8080

# Health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD wget --no-verbose --tries=1 --spider http://localhost:8080/health || exit 1

# Run the application with migrations
CMD ["./scripts/start.sh"]
